{"remainingRequest":"/Users/amou/Documents/GitHub/demo1/news/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/amou/Documents/GitHub/demo1/news/src/views/Login.vue?vue&type=style&index=0&id=26084dc2&lang=less&scoped=true&","dependencies":[{"path":"/Users/amou/Documents/GitHub/demo1/news/src/views/Login.vue","mtime":1581911929312},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi8vIOWBh+iuvuaIkeWGjeeZu+W9lemhteWGmeS4gOS4quagt+W8jwovLyDlm6DkuLrmmK/ljZXpobXlupTnlKgs5omA5Lul5Lya5b2x5ZON5YW25LuW57uE5Lu2Ci8vIOi/meaYr+W+iOWkp+eahOmXrumimAovLyDop6PlhrPlip7ms5XpnZ7luLjnroDljZUKLy8g5Y+q6ZyA6KaB5ZyoIHN0eWxlIOagh+etvua3u+WKoOWxnuaApyBzY29wZWQgCi8vIOWNs+WPr+S/neivgei/memHjOWGmeeahOaJgOacieagt+W8j+aUr+mYn+i/meS4quWNleaWh+S7tue7hOS7tueUn+aViAovLyBoMSB7Ci8vICAgICBjb2xvcjogcmVkOwovLyB9CgovKiDov5nph4zpu5jorqTlj6rmmK/lhpkgY3NzIOeahOWcsOaWuQrlpoLmnpzopoHlhpkgbGVzcwrpnIDopoHmt7vliqDkuIDkuKogbGFuZyDlsZ7mgKcgKi8KICAgIC5jbG9zZUJ0bnsKICAgICAgICBwYWRkaW5nOiA2LjY2N3Z3OwogICAgICAgIHNwYW4gewogICAgICAgICAgICAvLyBmb250c2l6ZTogMjdweDsKICAgICAgICAgICAgLy8g6L+Z6YeM5bqU6K+l5L2/55SoIHZ3IOWNleS9jQogICAgICAgICAgICAvLyDmnInkuobmj5Lku7bku6XlkI7lj6rpnIDopoEgYWx0ICsgegogICAgICAgICAgICAvLyDlsLHlj6/ku6XovazmjaLkuLogdncg5Y2V5L2NCiAgICAgICAgICAgIGZvbnQtc2l6ZTogNy41dnc7CiAgICAgICAgfQogICAgfQogICAgLmxvZ28gewogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICBzcGFuIHsKICAgICAgICAgICAgZm9udC1zaXplOiAzNXZ3OwogICAgICAgICAgICBjb2xvcjogI2Q4MWUwNgogICAgICAgIH0KICAgIH0K"},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\n    <div>\n        <!-- 只要写页面即可\n        就在这个单文件组件里面 -->\n        <div class=\"closeBtn\">\n            <span class=\"iconfont iconicon-test\"></span>\n        </div>\n        <div class=\"logo\">\n            <span class=\"iconfont iconnew\"></span>\n        </div>\n\n        <!-- <h1>这里是红色的标题</h1> -->\n\n        <!-- 为什么以前这里不能用大写?\n        因为 html 只接受小写标签, 部分大小写\n        但是现在 webpack 会帮我们自动处理这些问题\n        所以可以用驼峰命名法帮助方便编程 -->\n\n        <!-- 输入框子组件接收的数据包括\n        type 输入框的类型\n        placeholder 是未输入前的提示\n        rule 用来验证输入合法性的正则表达式(我们这里的传值, 传一个字符串进去,子组件在转换成正则对象) -->\n\n        <!-- 如果还需要区别不同输入框弹出的错误提示不一样, 可以继续传值 -->\n        <!-- 输入框每次的数据变动都会主动触发 valueChange 的自定义事件,\n        父组件需要监听这个事件获取参数并进行处理 -->\n        <!-- 每个输入框的作用都不一样, 一个是用来传用户名的, 一个用来传密码的\n        所以监听到不同输入框的时间, 绑定的函数也应该不一样 -->\n        <AuthInput \n            type=\"text\" \n            placeholder=\"请输入用户名\" \n            rule=\"^.{3,10}$\"\n            errMsg=\"请输入正确的用户名\"\n            @valueChange=\"setUserName\"\n            ></AuthInput>\n        <!-- 登录页如果要添加一个输入密码的输入框怎么办\n        不需要在碰输入框组建了\n        只需要这里传值即可 -->\n        <AuthInput \n            type=\"password\" \n            placeholder=\"请输入密码\" \n            rule=\"^.{6}$\"\n            errMsg=\"请输入正确密码\"\n            @valueChange=\"setPassword\"\n        ></AuthInput>\n\n        <!-- 子组件发送被监听的事件\n        跟原生事件是不一样的,即使同名\n        也不是同一个事件\n        所以尽量起一个独特好辨认的名字 -->\n        <AuthBtn\n            btnText=\"登录\"\n            @clickBtn=\"login\"\n        ></AuthBtn>\n    </div>\n</template>\n\n<script>\n// var authInput = {\n//     以前是直接写组件对象\n// }\n// 现在是引用单文件组件\n// import authInput from '../components/authInput.vue'\n// 可以使用 @ 符号直接代表 src 所在目录\n// 1. 引入子组件\nimport AuthInput from '@/components/AuthInput.vue'\nimport AuthBtn from '@/components/AuthBtn.vue'\n\nexport default {\n    data() {\n        return {\n            // 用来接收和暂存子组件发送过来的数据\n            username: '',\n            password: ''\n        }\n    },\n    // 2.注册子组件, components\n    components: {\n        // key 是组件名\n        // value 是组建对象\n        // authInput: authInput\n        AuthInput,\n        // AuthBtn: AuthBtn 缩写\n        AuthBtn\n    },\n    methods: {\n        setPassword(password) {\n            // 这里的 password 只是形参, 用来接受子组件事件传递过来的参数\n            // console.log('父组件接收到了密码输入框的数据更新, 先存在自己的data 当中');\n            this.password = password\n        },\n        setUserName(username) {\n            // console.log('父组件接收到了用户名输入框的数据更新, 先存在自己的data 当中');\n            this.username = username\n            \n        },\n        login() {\n            if (!this.username || this.password){\n                this.$toast('请输入完整信息')\n            }\n            // this.$axios({\n                //axios是基于promise机制的一个请求库\n                //现在先熟悉promise的应用\n                //promise最大的特点是回调函数直接跟在前一个函数后面，使用.then进行拼接\n                //这叫链式调用\n                //这里执行登陆\n            //     url:'http://liangwei.tech:3000/post',\n            //     // method是指请求类型\n            //     method:'get'\n            // }).then(\n            //     // function(res){\n            //     //     console.log(res);\n            //     // }\n            //     res => {\n            //         // res.data就是服务器返回的数据，接下来只需要根据数据结构进行渲染即可，数据结果已经是json格式\n            //         console.log(res.data);\n            //     }\n            // )\n\n            //post方式\n            this.$axios({\n                url:'http://liangwei.tech:3000/login',\n                method:'post',\n                data:{\n                    username:'10010',\n                    password:'123'\n                }\n            }).then(\n                res=>{\n                    console.log(res.data);\n                    const {statusCode,message} = res.data;\n                    if (statusCode == 200 && message){\n                        this.$toast.success(message)\n                    }else {\n                        this.$toast.success(message)\n                        const {data} = res.data;\n                        localStorage.setItem('token',data.token)\n                        localStorage.setItem('user_id',data.user.id)\n                    }\n                    //     this.$toast(res.data.message)\n                    // if (res.data.statusCode == 200 && res.data.message){\n                    //     this.$toast(res.data.message)\n                    // }\n                }\n            )\n            // .catch(err=>{\n            //     console.dir(err);\n            //     console.log(err.response);\n            //     this.$toast.fail(err.response.data.message ||\"系统错误\")\n                \n            // })\n\n\n            // console.log('父组件监听到子组件传递过来的时间,绑定的函数被触发了');\n            // 每次我们的输入框子组件输入的数据都会存放在 data 当中\n            // 所以这里如果要登录\n            // 直接获取 this.username 和 this.password 即可\n            // console.log('登录按钮被点击');\n            // console.log('用户名是'+this.username);\n            // console.log('密码是'+this.password);\n            // 这里获取到的数据就可以用来发送请求了\n            // this.$axios({\n            //     url:\"/post\",\n            //     method:\"get\",\n            // }).then(res=>{\n            //     console.log(res);\n                \n            // })\n            \n        }\n    }\n}\n</script>\n\n<style lang=\"less\" scoped>\n// 假设我再登录页写一个样式\n// 因为是单页应用,所以会影响其他组件\n// 这是很大的问题\n// 解决办法非常简单\n// 只需要在 style 标签添加属性 scoped \n// 即可保证这里写的所有样式支队这个单文件组件生效\n// h1 {\n//     color: red;\n// }\n\n/* 这里默认只是写 css 的地方\n如果要写 less\n需要添加一个 lang 属性 */\n    .closeBtn{\n        padding: 6.667vw;\n        span {\n            // fontsize: 27px;\n            // 这里应该使用 vw 单位\n            // 有了插件以后只需要 alt + z\n            // 就可以转换为 vw 单位\n            font-size: 7.5vw;\n        }\n    }\n    .logo {\n        text-align: center;\n        span {\n            font-size: 35vw;\n            color: #d81e06\n        }\n    }\n</style>"]}]}