{"remainingRequest":"/Users/amou/Documents/GitHub/demo1/news/node_modules/babel-loader/lib/index.js!/Users/amou/Documents/GitHub/demo1/news/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/amou/Documents/GitHub/demo1/news/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/amou/Documents/GitHub/demo1/news/src/views/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/amou/Documents/GitHub/demo1/news/src/views/Login.vue","mtime":1581911929312},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/amou/Documents/GitHub/demo1/news/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8gdmFyIGF1dGhJbnB1dCA9IHsKLy8gICAgIOS7peWJjeaYr+ebtOaOpeWGmee7hOS7tuWvueixoQovLyB9Ci8vIOeOsOWcqOaYr+W8leeUqOWNleaWh+S7tue7hOS7tgovLyBpbXBvcnQgYXV0aElucHV0IGZyb20gJy4uL2NvbXBvbmVudHMvYXV0aElucHV0LnZ1ZScKLy8g5Y+v5Lul5L2/55SoIEAg56ym5Y+355u05o6l5Luj6KGoIHNyYyDmiYDlnKjnm67lvZUKLy8gMS4g5byV5YWl5a2Q57uE5Lu2CmltcG9ydCBBdXRoSW5wdXQgZnJvbSAnQC9jb21wb25lbnRzL0F1dGhJbnB1dC52dWUnOwppbXBvcnQgQXV0aEJ0biBmcm9tICdAL2NvbXBvbmVudHMvQXV0aEJ0bi52dWUnOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIC8vIOeUqOadpeaOpeaUtuWSjOaaguWtmOWtkOe7hOS7tuWPkemAgei/h+adpeeahOaVsOaNrgogICAgICB1c2VybmFtZTogJycsCiAgICAgIHBhc3N3b3JkOiAnJwogICAgfTsKICB9LAogIC8vIDIu5rOo5YaM5a2Q57uE5Lu2LCBjb21wb25lbnRzCiAgY29tcG9uZW50czogewogICAgLy8ga2V5IOaYr+e7hOS7tuWQjQogICAgLy8gdmFsdWUg5piv57uE5bu65a+56LGhCiAgICAvLyBhdXRoSW5wdXQ6IGF1dGhJbnB1dAogICAgQXV0aElucHV0OiBBdXRoSW5wdXQsCiAgICAvLyBBdXRoQnRuOiBBdXRoQnRuIOe8qeWGmQogICAgQXV0aEJ0bjogQXV0aEJ0bgogIH0sCiAgbWV0aG9kczogewogICAgc2V0UGFzc3dvcmQ6IGZ1bmN0aW9uIHNldFBhc3N3b3JkKHBhc3N3b3JkKSB7CiAgICAgIC8vIOi/memHjOeahCBwYXNzd29yZCDlj6rmmK/lvaLlj4IsIOeUqOadpeaOpeWPl+WtkOe7hOS7tuS6i+S7tuS8oOmAkui/h+adpeeahOWPguaVsAogICAgICAvLyBjb25zb2xlLmxvZygn54i257uE5Lu25o6l5pS25Yiw5LqG5a+G56CB6L6T5YWl5qGG55qE5pWw5o2u5pu05pawLCDlhYjlrZjlnKjoh6rlt7HnmoRkYXRhIOW9k+S4rScpOwogICAgICB0aGlzLnBhc3N3b3JkID0gcGFzc3dvcmQ7CiAgICB9LAogICAgc2V0VXNlck5hbWU6IGZ1bmN0aW9uIHNldFVzZXJOYW1lKHVzZXJuYW1lKSB7CiAgICAgIC8vIGNvbnNvbGUubG9nKCfniLbnu4Tku7bmjqXmlLbliLDkuobnlKjmiLflkI3ovpPlhaXmoYbnmoTmlbDmja7mm7TmlrAsIOWFiOWtmOWcqOiHquW3seeahGRhdGEg5b2T5LitJyk7CiAgICAgIHRoaXMudXNlcm5hbWUgPSB1c2VybmFtZTsKICAgIH0sCiAgICBsb2dpbjogZnVuY3Rpb24gbG9naW4oKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIXRoaXMudXNlcm5hbWUgfHwgdGhpcy5wYXNzd29yZCkgewogICAgICAgIHRoaXMuJHRvYXN0KCfor7fovpPlhaXlrozmlbTkv6Hmga8nKTsKICAgICAgfSAvLyB0aGlzLiRheGlvcyh7CiAgICAgIC8vYXhpb3PmmK/ln7rkuo5wcm9taXNl5py65Yi255qE5LiA5Liq6K+35rGC5bqTCiAgICAgIC8v546w5Zyo5YWI54af5oKJcHJvbWlzZeeahOW6lOeUqAogICAgICAvL3Byb21pc2XmnIDlpKfnmoTnibnngrnmmK/lm57osIPlh73mlbDnm7TmjqXot5/lnKjliY3kuIDkuKrlh73mlbDlkI7pnaLvvIzkvb/nlKgudGhlbui/m+ihjOaLvOaOpQogICAgICAvL+i/meWPq+mTvuW8j+iwg+eUqAogICAgICAvL+i/memHjOaJp+ihjOeZu+mZhgogICAgICAvLyAgICAgdXJsOidodHRwOi8vbGlhbmd3ZWkudGVjaDozMDAwL3Bvc3QnLAogICAgICAvLyAgICAgLy8gbWV0aG9k5piv5oyH6K+35rGC57G75Z6LCiAgICAgIC8vICAgICBtZXRob2Q6J2dldCcKICAgICAgLy8gfSkudGhlbigKICAgICAgLy8gICAgIC8vIGZ1bmN0aW9uKHJlcyl7CiAgICAgIC8vICAgICAvLyAgICAgY29uc29sZS5sb2cocmVzKTsKICAgICAgLy8gICAgIC8vIH0KICAgICAgLy8gICAgIHJlcyA9PiB7CiAgICAgIC8vICAgICAgICAgLy8gcmVzLmRhdGHlsLHmmK/mnI3liqHlmajov5Tlm57nmoTmlbDmja7vvIzmjqXkuIvmnaXlj6rpnIDopoHmoLnmja7mlbDmja7nu5PmnoTov5vooYzmuLLmn5PljbPlj6/vvIzmlbDmja7nu5Pmnpzlt7Lnu4/mmK9qc29u5qC85byPCiAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpOwogICAgICAvLyAgICAgfQogICAgICAvLyApCiAgICAgIC8vcG9zdOaWueW8jwoKCiAgICAgIHRoaXMuJGF4aW9zKHsKICAgICAgICB1cmw6ICdodHRwOi8vbGlhbmd3ZWkudGVjaDozMDAwL2xvZ2luJywKICAgICAgICBtZXRob2Q6ICdwb3N0JywKICAgICAgICBkYXRhOiB7CiAgICAgICAgICB1c2VybmFtZTogJzEwMDEwJywKICAgICAgICAgIHBhc3N3b3JkOiAnMTIzJwogICAgICAgIH0KICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpOwogICAgICAgIHZhciBfcmVzJGRhdGEgPSByZXMuZGF0YSwKICAgICAgICAgICAgc3RhdHVzQ29kZSA9IF9yZXMkZGF0YS5zdGF0dXNDb2RlLAogICAgICAgICAgICBtZXNzYWdlID0gX3JlcyRkYXRhLm1lc3NhZ2U7CgogICAgICAgIGlmIChzdGF0dXNDb2RlID09IDIwMCAmJiBtZXNzYWdlKSB7CiAgICAgICAgICBfdGhpcy4kdG9hc3Quc3VjY2VzcyhtZXNzYWdlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMuJHRvYXN0LnN1Y2Nlc3MobWVzc2FnZSk7CgogICAgICAgICAgdmFyIGRhdGEgPSByZXMuZGF0YS5kYXRhOwogICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuJywgZGF0YS50b2tlbik7CiAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndXNlcl9pZCcsIGRhdGEudXNlci5pZCk7CiAgICAgICAgfSAvLyAgICAgdGhpcy4kdG9hc3QocmVzLmRhdGEubWVzc2FnZSkKICAgICAgICAvLyBpZiAocmVzLmRhdGEuc3RhdHVzQ29kZSA9PSAyMDAgJiYgcmVzLmRhdGEubWVzc2FnZSl7CiAgICAgICAgLy8gICAgIHRoaXMuJHRvYXN0KHJlcy5kYXRhLm1lc3NhZ2UpCiAgICAgICAgLy8gfQoKICAgICAgfSk7IC8vIC5jYXRjaChlcnI9PnsKICAgICAgLy8gICAgIGNvbnNvbGUuZGlyKGVycik7CiAgICAgIC8vICAgICBjb25zb2xlLmxvZyhlcnIucmVzcG9uc2UpOwogICAgICAvLyAgICAgdGhpcy4kdG9hc3QuZmFpbChlcnIucmVzcG9uc2UuZGF0YS5tZXNzYWdlIHx8Iuezu+e7n+mUmeivryIpCiAgICAgIC8vIH0pCiAgICAgIC8vIGNvbnNvbGUubG9nKCfniLbnu4Tku7bnm5HlkKzliLDlrZDnu4Tku7bkvKDpgJLov4fmnaXnmoTml7bpl7Qs57uR5a6a55qE5Ye95pWw6KKr6Kem5Y+R5LqGJyk7CiAgICAgIC8vIOavj+asoeaIkeS7rOeahOi+k+WFpeahhuWtkOe7hOS7tui+k+WFpeeahOaVsOaNrumDveS8muWtmOaUvuWcqCBkYXRhIOW9k+S4rQogICAgICAvLyDmiYDku6Xov5nph4zlpoLmnpzopoHnmbvlvZUKICAgICAgLy8g55u05o6l6I635Y+WIHRoaXMudXNlcm5hbWUg5ZKMIHRoaXMucGFzc3dvcmQg5Y2z5Y+vCiAgICAgIC8vIGNvbnNvbGUubG9nKCfnmbvlvZXmjInpkq7ooqvngrnlh7snKTsKICAgICAgLy8gY29uc29sZS5sb2coJ+eUqOaIt+WQjeaYrycrdGhpcy51c2VybmFtZSk7CiAgICAgIC8vIGNvbnNvbGUubG9nKCflr4bnoIHmmK8nK3RoaXMucGFzc3dvcmQpOwogICAgICAvLyDov5nph4zojrflj5bliLDnmoTmlbDmja7lsLHlj6/ku6XnlKjmnaXlj5HpgIHor7fmsYLkuoYKICAgICAgLy8gdGhpcy4kYXhpb3MoewogICAgICAvLyAgICAgdXJsOiIvcG9zdCIsCiAgICAgIC8vICAgICBtZXRob2Q6ImdldCIsCiAgICAgIC8vIH0pLnRoZW4ocmVzPT57CiAgICAgIC8vICAgICBjb25zb2xlLmxvZyhyZXMpOwogICAgICAvLyB9KQogICAgfQogIH0KfTs="},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAA,SAAA,MAAA,4BAAA;AACA,OAAA,OAAA,MAAA,0BAAA;AAEA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA;AACA,MAAA,QAAA,EAAA,EAFA;AAGA,MAAA,QAAA,EAAA;AAHA,KAAA;AAKA,GAPA;AAQA;AACA,EAAA,UAAA,EAAA;AACA;AACA;AACA;AACA,IAAA,SAAA,EAAA,SAJA;AAKA;AACA,IAAA,OAAA,EAAA;AANA,GATA;AAiBA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,QADA,EACA;AACA;AACA;AACA,WAAA,QAAA,GAAA,QAAA;AACA,KALA;AAMA,IAAA,WANA,uBAMA,QANA,EAMA;AACA;AACA,WAAA,QAAA,GAAA,QAAA;AAEA,KAVA;AAWA,IAAA,KAXA,mBAWA;AAAA;;AACA,UAAA,CAAA,KAAA,QAAA,IAAA,KAAA,QAAA,EAAA;AACA,aAAA,MAAA,CAAA,SAAA;AACA,OAHA,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,WAAA,MAAA,CAAA;AACA,QAAA,GAAA,EAAA,iCADA;AAEA,QAAA,MAAA,EAAA,MAFA;AAGA,QAAA,IAAA,EAAA;AACA,UAAA,QAAA,EAAA,OADA;AAEA,UAAA,QAAA,EAAA;AAFA;AAHA,OAAA,EAOA,IAPA,CAQA,UAAA,GAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA;AADA,wBAEA,GAAA,CAAA,IAFA;AAAA,YAEA,UAFA,aAEA,UAFA;AAAA,YAEA,OAFA,aAEA,OAFA;;AAGA,YAAA,UAAA,IAAA,GAAA,IAAA,OAAA,EAAA;AACA,UAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA;AACA,SAFA,MAEA;AACA,UAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA;;AADA,cAEA,IAFA,GAEA,GAAA,CAAA,IAFA,CAEA,IAFA;AAGA,UAAA,YAAA,CAAA,OAAA,CAAA,OAAA,EAAA,IAAA,CAAA,KAAA;AACA,UAAA,YAAA,CAAA,OAAA,CAAA,SAAA,EAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,SAVA,CAWA;AACA;AACA;AACA;;AACA,OAvBA,EAxBA,CAiDA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AApFA;AAjBA,CAAA","sourcesContent":["<template>\n    <div>\n        <!-- 只要写页面即可\n        就在这个单文件组件里面 -->\n        <div class=\"closeBtn\">\n            <span class=\"iconfont iconicon-test\"></span>\n        </div>\n        <div class=\"logo\">\n            <span class=\"iconfont iconnew\"></span>\n        </div>\n\n        <!-- <h1>这里是红色的标题</h1> -->\n\n        <!-- 为什么以前这里不能用大写?\n        因为 html 只接受小写标签, 部分大小写\n        但是现在 webpack 会帮我们自动处理这些问题\n        所以可以用驼峰命名法帮助方便编程 -->\n\n        <!-- 输入框子组件接收的数据包括\n        type 输入框的类型\n        placeholder 是未输入前的提示\n        rule 用来验证输入合法性的正则表达式(我们这里的传值, 传一个字符串进去,子组件在转换成正则对象) -->\n\n        <!-- 如果还需要区别不同输入框弹出的错误提示不一样, 可以继续传值 -->\n        <!-- 输入框每次的数据变动都会主动触发 valueChange 的自定义事件,\n        父组件需要监听这个事件获取参数并进行处理 -->\n        <!-- 每个输入框的作用都不一样, 一个是用来传用户名的, 一个用来传密码的\n        所以监听到不同输入框的时间, 绑定的函数也应该不一样 -->\n        <AuthInput \n            type=\"text\" \n            placeholder=\"请输入用户名\" \n            rule=\"^.{3,10}$\"\n            errMsg=\"请输入正确的用户名\"\n            @valueChange=\"setUserName\"\n            ></AuthInput>\n        <!-- 登录页如果要添加一个输入密码的输入框怎么办\n        不需要在碰输入框组建了\n        只需要这里传值即可 -->\n        <AuthInput \n            type=\"password\" \n            placeholder=\"请输入密码\" \n            rule=\"^.{6}$\"\n            errMsg=\"请输入正确密码\"\n            @valueChange=\"setPassword\"\n        ></AuthInput>\n\n        <!-- 子组件发送被监听的事件\n        跟原生事件是不一样的,即使同名\n        也不是同一个事件\n        所以尽量起一个独特好辨认的名字 -->\n        <AuthBtn\n            btnText=\"登录\"\n            @clickBtn=\"login\"\n        ></AuthBtn>\n    </div>\n</template>\n\n<script>\n// var authInput = {\n//     以前是直接写组件对象\n// }\n// 现在是引用单文件组件\n// import authInput from '../components/authInput.vue'\n// 可以使用 @ 符号直接代表 src 所在目录\n// 1. 引入子组件\nimport AuthInput from '@/components/AuthInput.vue'\nimport AuthBtn from '@/components/AuthBtn.vue'\n\nexport default {\n    data() {\n        return {\n            // 用来接收和暂存子组件发送过来的数据\n            username: '',\n            password: ''\n        }\n    },\n    // 2.注册子组件, components\n    components: {\n        // key 是组件名\n        // value 是组建对象\n        // authInput: authInput\n        AuthInput,\n        // AuthBtn: AuthBtn 缩写\n        AuthBtn\n    },\n    methods: {\n        setPassword(password) {\n            // 这里的 password 只是形参, 用来接受子组件事件传递过来的参数\n            // console.log('父组件接收到了密码输入框的数据更新, 先存在自己的data 当中');\n            this.password = password\n        },\n        setUserName(username) {\n            // console.log('父组件接收到了用户名输入框的数据更新, 先存在自己的data 当中');\n            this.username = username\n            \n        },\n        login() {\n            if (!this.username || this.password){\n                this.$toast('请输入完整信息')\n            }\n            // this.$axios({\n                //axios是基于promise机制的一个请求库\n                //现在先熟悉promise的应用\n                //promise最大的特点是回调函数直接跟在前一个函数后面，使用.then进行拼接\n                //这叫链式调用\n                //这里执行登陆\n            //     url:'http://liangwei.tech:3000/post',\n            //     // method是指请求类型\n            //     method:'get'\n            // }).then(\n            //     // function(res){\n            //     //     console.log(res);\n            //     // }\n            //     res => {\n            //         // res.data就是服务器返回的数据，接下来只需要根据数据结构进行渲染即可，数据结果已经是json格式\n            //         console.log(res.data);\n            //     }\n            // )\n\n            //post方式\n            this.$axios({\n                url:'http://liangwei.tech:3000/login',\n                method:'post',\n                data:{\n                    username:'10010',\n                    password:'123'\n                }\n            }).then(\n                res=>{\n                    console.log(res.data);\n                    const {statusCode,message} = res.data;\n                    if (statusCode == 200 && message){\n                        this.$toast.success(message)\n                    }else {\n                        this.$toast.success(message)\n                        const {data} = res.data;\n                        localStorage.setItem('token',data.token)\n                        localStorage.setItem('user_id',data.user.id)\n                    }\n                    //     this.$toast(res.data.message)\n                    // if (res.data.statusCode == 200 && res.data.message){\n                    //     this.$toast(res.data.message)\n                    // }\n                }\n            )\n            // .catch(err=>{\n            //     console.dir(err);\n            //     console.log(err.response);\n            //     this.$toast.fail(err.response.data.message ||\"系统错误\")\n                \n            // })\n\n\n            // console.log('父组件监听到子组件传递过来的时间,绑定的函数被触发了');\n            // 每次我们的输入框子组件输入的数据都会存放在 data 当中\n            // 所以这里如果要登录\n            // 直接获取 this.username 和 this.password 即可\n            // console.log('登录按钮被点击');\n            // console.log('用户名是'+this.username);\n            // console.log('密码是'+this.password);\n            // 这里获取到的数据就可以用来发送请求了\n            // this.$axios({\n            //     url:\"/post\",\n            //     method:\"get\",\n            // }).then(res=>{\n            //     console.log(res);\n                \n            // })\n            \n        }\n    }\n}\n</script>\n\n<style lang=\"less\" scoped>\n// 假设我再登录页写一个样式\n// 因为是单页应用,所以会影响其他组件\n// 这是很大的问题\n// 解决办法非常简单\n// 只需要在 style 标签添加属性 scoped \n// 即可保证这里写的所有样式支队这个单文件组件生效\n// h1 {\n//     color: red;\n// }\n\n/* 这里默认只是写 css 的地方\n如果要写 less\n需要添加一个 lang 属性 */\n    .closeBtn{\n        padding: 6.667vw;\n        span {\n            // fontsize: 27px;\n            // 这里应该使用 vw 单位\n            // 有了插件以后只需要 alt + z\n            // 就可以转换为 vw 单位\n            font-size: 7.5vw;\n        }\n    }\n    .logo {\n        text-align: center;\n        span {\n            font-size: 35vw;\n            color: #d81e06\n        }\n    }\n</style>"],"sourceRoot":"src/views"}]}